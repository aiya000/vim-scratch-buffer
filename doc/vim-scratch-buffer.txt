*scratch-buffer.vim*		The fastest way to open scratch buffers

Author: aiya000
License: MIT license

==============================================================================
CONTENTS					*scratch-buffer-contents*

INTRODUCTION			|scratch-buffer-introduction|
USAGE				|scratch-buffer-usage|
INTERFACE			|scratch-buffer-interface|
  VARIABLES			|scratch-buffer-variables|
  COMMANDS			|scratch-buffer-commands|
  FUNCTIONS			|scratch-buffer-functions|
CHANGELOG			|scratch-buffer-changelog|


==============================================================================
INTRODUCTION						*scratch-buffer-introduction*

**No more hassle with file paths!**
The fastest way to open an instant scratch buffer.

Supercharge with vim-quickrun!
Combine it with [vim-quickrun](https://github.com/thinca/vim-quickrun)
to execute code instantly!
>
	" Open a TypeScript buffer
	:ScratchBufferOpen ts

	" Write TypeScript code
	" ...

	" ...and run it immediately!
	:QuickRun
<
Please see the `scratch-buffer-usage` section for usage of `:ScratchBufferOpen`.

Newer Version:
https://github.com/aiya000/vim-scratch-buffer


==============================================================================
USAGE						*scratch-buffer-usage*

Open a scratch buffer with or without a file extension:
>
	" Open a new scratch buffer without file extension and filetype
	:ScratchBufferOpen
	:ScratchBufferOpen --no-file-ext

	" Open a markdown buffer
	:ScratchBufferOpen md

	" Open a buffer without file extension and filetype with :sp and 3 lines
	:ScratchBufferOpen --no-file-ext sp 3

	" Open a markdown buffer with :sp and 3 lines
	:ScratchBufferOpen md sp 3
<
Of course, you can open other file types too:
>
	" Open a TypeScript buffer
	:ScratchBufferOpen ts
<

==============================================================================
INTERFACE				*scratch-buffer-interface*

------------------------------------------------------------------------------
VARIABLES						*scratch-buffer-variables*

*g:scratch_buffer_tmp_file_pattern*
	Default: '/tmp/vim-scratch-buffer-%d'

	When `ScratchBufferOpen` opens a scratch buffer, it will make a
	decision based on this pattern.
	Specifically, `printf($'/tmp/vim-scratch-buffer-%d.{ext}', count)` will
	be opened. `ext` is the first argument of `ScratchBufferOpen`.
	`count` is the number of currently open scratch buffers +1.

------------------------------------------------------------------------------
COMMANDS					*scratch-buffer-commands*

						*:ScratchBufferOpen*
:ScratchBufferOpen [file-extension | --no-file-ext] [open-method] [buffer-size]
	Open a temporary scratch buffer with a random file name.

	This opens buffers by the rule
	described in `g:scratch_buffer_tmp_file_pattern`.

	[file-extension] is an optional argument:
	  - When omitted or --no-file-ext is specified:
	    Creates a buffer without file extension and filetype
	  - Otherwise:
	    Uses the specified extension (e.g., 'md', 'ts') as filetype

	The buffer is opened as a temporary buffer.
	The following properties:
>
	setlocal buftype=nofile
	setlocal bufhidden=hide
	setlocal noswapfile
<
	The opened buffers don't `:write` automatically.
	You can choose whether to `:write` or not.

	[open-method] is an optional argument, should be `'sp'` or `'vsp'`.
	Open the buffer on top if `'sp'`,
	or open the buffer on the left if `'vsp'`.
	Please also see `:split` and `:vsplit`.
	Default value:`'vsp'`

	[buffer-size] is an optional argument, should be a positive number.
	`:ScratchBufferOpen` resizes the opened buffer upon opening,
	or doesn't resize if this is omitted.


						*:ScratchBufferOpenFile*
:ScratchBufferOpenFile [file-extension | --no-file-ext] [open-method] [buffer-size]
	Similar to `:ScratchBufferOpen` but creates a normal buffer instead of
	a temporary one. The buffer can be written and saved normally.

	Uses the same arguments as `:ScratchBufferOpen`.


						*:ScratchBufferClean*
:ScratchBufferClean
	Delete all scratch files and buffers that
	were opened by `:ScratchBufferOpen`.


==============================================================================
FUNCTIONS					*scratch-buffer-functions*

						*scratch_buffer#open()*
scratch_buffer#open([file-extension | --no-file-ext][, open-method][, buffer-size])
	Same as `:ScratchBufferOpen`. Creates a buffer with or without
	filetype based on the first argument:
	  - When an empty string or`'--no-file-ext'`is specified:
	    Creates a buffer without file extension and filetype
	  - Otherwise:
	    Uses the specified extension as filetype

						*scratch_buffer#open_file()*
scratch_buffer#open_file([file-extension | --no-file-ext][, open-method][, buffer-size])
	Same as `:ScratchBufferOpenFile`. Creates a normal buffer with the same naming
	convention as `:ScratchBufferOpen`, but without temporary buffer properties.

						*scratch_buffer#clean()*
scratch_buffer#clean()
	Same as `:ScratchBufferClean`.


==============================================================================
CHANGELOG					*scratch-buffer-changelog*

Please see https://github.com/aiya000/vim-scratch-buffer/commits/main


==============================================================================
vim:tw=78:ts=8:ft=help:norl:noet:fen:fdm=marker
