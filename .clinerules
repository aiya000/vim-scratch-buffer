## Coding

- Use `const` instead of `let` if available
- Don't `l:` to define local variables unless necessary
- Use the conditional operator `foo ? bar : baz` instead of `if` when it is more readable
- Use the conditional operator `foo ? bar : baz` when it is more readable than `if`
- Define the name if use optional arguments. e.g., `a:0`, `a:1`, ...
    - For example: `const filetype = get(a:000, 0, v:null)`
- Don't use `==`. Use `==#` instead
- Make the tests if you add new features
- Don't define unnecessary `-nargs=0` in the command definition

## doc

0. MOST IMPORTANT RULES - NEVER BREAK THESE
   - NEVER change existing spacing or tabs
   - NEVER modify text unrelated to the current task
   - NEVER add indentation to empty lines
   - NEVER add unnecessary tabs or spaces to existing text
   - Empty lines must be completely empty (no spaces, no tabs)

1. Text Formatting
   - Normal descriptions are not indented
   - One line should not exceed 78 characters (including tabs)
   - Break lines at meaningful points, not mechanically at character 78
   - Keep related information together, use blank lines to separate different topics

2. Structure and Indentation
   - `*:CommandName*` tags are not indented
   - Option/argument descriptions are indented with 2 spaces
   - Additional details under options are indented with 4 spaces
   - Empty lines are used to separate logical sections

3. Code Examples
   - IMPORTANT: Always use real tab characters for indentation inside code blocks
     - Space characters are NOT allowed for indentation
     - Each line between `>` and `<` MUST be indented with tab
   - Surround code blocks with `>` and `<`
   - Group related commands in the same block
   - Add descriptive comments starting with `"`
   - Empty lines between command groups are allowed for clarity

Example:
```help
[TAB][TAB][TAB][TAB][TAB][TAB]:FooCommand* | ← [TAB] represents a real tab character. Also Vim indexes must be indented
:FooCommand [arg1] [arg2]
[TAB]Opens a new foo with specified arguments.   | ← Description is indented with a tab
                                                 | ← Empty line is completely empty. Must not contain any spaces or tabs
[TAB][arg1] is an optional argument:
[TAB]  - When omitted: Uses default value
[TAB]  - Otherwise: Uses specified value
>                        | ← Heading '<' character means starting of code block
[TAB]" Basic usage       | ← Every line inside code block must be indented with tab
[TAB]:FooCommand

[TAB]" With arguments    | ← Comments are also indented with tab
[TAB]:FooCommand value
[TAB]:FooCommand value1 value2
<                        | ← Heading '>' character means ending of code block
[TAB]Notice the empty lines above and below are completely empty (no spaces or tabs).
>
" Buffer settings          | ← Another code block example
[TAB]setlocal setting1
[TAB]setlocal setting2    | ← Each line has exactly one tab indent
<
```
